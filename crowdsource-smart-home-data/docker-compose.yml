version: '3'

services:
  prometheus:
    image: prom/prometheus:v2.30.3
    ports:
      - 9090:9090
    volumes:
      - ./Dashboard/Prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command: --web.enable-lifecycle  --config.file=/etc/prometheus/prometheus.yml
    depends_on:
      - pushgateway

  pushgateway:
    image: prom/pushgateway
    ports:
      - 9091:9091

  grafana:
    image: grafana/grafana
    env_file: .env
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=$GF_SECURITY_ADMIN_PASSWORD
      - GF_USERS_ALLOW_SIGN_UP=$GF_USERS_ALLOW_SIGN_UP
      - GF_AUTH_ANONYMOUS_ENABLED=$GF_AUTH_ANONYMOUS_ENABLED
    user: "472"
    depends_on:
      - prometheus
    volumes:
      - ./Dashboard/Grafana/provisioning/:/etc/grafana/provisioning/
    restart: always
    ports:
      - 3000:3000

  redis:
    image: "redis:alpine"
    restart: always
    command: redis-server --requirepass $REDIS_PASSWORD
    environment:
     - REDIS_REPLICATION_MODE=master
    ports:
     - "6379:6379"

  ingest:
    build: ./api/ingest/server
    container_name: ingest_api
    restart: always
    environment:
      - APP_NAME=Ingest_Api
      - INGEST_BASE_PATH=$INGEST_BASE_PATH
      - INGEST_HUDI_RATE_MINUTES=$INGEST_HUDI_RATE_MINUTES
      - INGEST_PUSHGATEWAY_HOST=pushgateway
      - INGEST_PUSHGATEWAY_PORT=9091
      - INGEST_REDIS_HOST=redis
      - INGEST_REDIS_PASSWORD=$REDIS_PASSWORD
    expose:
      - 8443
    labels:
      - traefik.enable=true
      - traefik.http.routers.ingest.entrypoints=websecure
      - traefik.http.routers.ingest.rule=Host(`smarthouse.av.it.pt`) && PathPrefix(`/api/ingest`)
      - traefik.http.routers.ingest.tls=true
      - traefik.http.routers.ingest.tls.certresolver=sample
    depends_on:
      - redis

  export:
    build: ./api/export/server
    container_name: export_api
    restart: always
    environment:
      - APP_NAME=Export_Api
      - EXPORT_BASE_PATH=$INGEST_BASE_PATH
    expose:
      - 8443
    labels:
      - traefik.enable=true
      - traefik.http.routers.export.entrypoints=websecure
      - traefik.http.routers.export.rule=Host(`smarthouse.av.it.pt`) && PathPrefix(`/api/export`)
      - traefik.http.routers.export.tls=true
      - traefik.http.routers.export.tls.certresolver=sample

  website:
    build: ./website
    container_name: website
    restart: always
    expose:
      - 80
    labels:
      - traefik.enable=true
      - traefik.backend=website
      - traefik.http.routers.website.entrypoints=websecure
      - traefik.http.routers.website.rule=Host(`smarthouse.av.it.pt`)
      - traefik.http.routers.website.tls=true
      - traefik.http.routers.website.tls.certresolver=sample

  reverse-proxy:
    image: traefik
    # Enables the web UI and tells Traefik to listen to docker
    command: 
      #- --api.insecure=true # DONT
      - --providers.docker
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443

      # Redirect to use SSL
      #- --entrypoints.web.http.redirections.entrypoint.to=websecure
      #- --entrypoints.web.http.redirections.entrypoint.scheme=https

      # SSL Lets encrypt
      - --certificatesResolvers.sample.acme.tlsChallenge=true
      - --certificatesResolvers.sample.acme.email=rodrigoflima@ua.pt
      - --certificatesResolvers.sample.acme.storage=/shared/acme.json
      - --certificatesResolvers.sample.acme.httpChallenge.entryPoint=web
      # Staging server to mimic production (to not get banned due to rate limiting)
      - --certificatesResolvers.sample.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./shared:/shared
    ports:
      # The HTTP port
      - 80:80
      # The HTTPS port
      - 443:443
      # The Web UI (enabled by --api.insecure=true)
      #- 8080:8080               # DONT
    depends_on:
      - ingest
      - export
      - website
    labels:
      - traefik.http.routers.traefik.tls=true
      - traefik.http.routers.traefik.tls.certresolver=sample

volumes:
  prometheus-data:
